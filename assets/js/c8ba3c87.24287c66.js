"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[6070],{3905:(e,a,r)=>{r.d(a,{Zo:()=>c,kt:()=>f});var n=r(7294);function i(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function s(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function t(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?s(Object(r),!0).forEach((function(a){i(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,n,i=function(e,a){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],a.indexOf(r)>=0||(i[r]=e[r]);return i}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),d=function(e){var a=n.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):t(t({},a),e)),r},c=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(r),m=i,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return r?n.createElement(f,t(t({ref:a},c),{},{components:r})):n.createElement(f,t({ref:a},c))}));function f(e,a){var r=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var s=r.length,t=new Array(s);t[0]=m;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[u]="string"==typeof e?e:i,t[1]=o;for(var d=2;d<s;d++)t[d]=r[d];return n.createElement.apply(null,t)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3668:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=r(7462),i=(r(7294),r(3905));const s={title:"Middlewares",slug:"/middlewares-intro",sidebar_position:1},t="Introducci\xf3n a los Middlewares",o={unversionedId:"modulo06/index",id:"modulo06/index",title:"Middlewares",description:"Express.js es un popular framework de Node.js que se utiliza para crear aplicaciones web y APIs de manera sencilla y r\xe1pida. Una de las caracter\xedsticas m\xe1s poderosas de Express.js son los middlewares, que permiten interceptar y manipular las solicitudes y respuestas HTTP de una aplicaci\xf3n.",source:"@site/docs/modulo06/index.md",sourceDirName:"modulo06",slug:"/middlewares-intro",permalink:"/backend-nodejs-mongodb/middlewares-intro",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo06/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Middlewares",slug:"/middlewares-intro",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Modulo 06",permalink:"/backend-nodejs-mongodb/category/modulo-06"},next:{title:"Middlewares internos",permalink:"/backend-nodejs-mongodb/built-in-middlewares"}},l={},d=[{value:"\xbfQu\xe9 es un Middleware?",id:"qu\xe9-es-un-middleware",level:2},{value:"\xbfPor qu\xe9 son importantes?",id:"por-qu\xe9-son-importantes",level:2},{value:"Tipos de middlewares",id:"tipos-de-middlewares",level:2}],c={toc:d},u="wrapper";function p(e){let{components:a,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introducci\xf3n-a-los-middlewares"},"Introducci\xf3n a los Middlewares"),(0,i.kt)("p",null,"Express.js es un popular framework de Node.js que se utiliza para crear aplicaciones web y APIs de manera sencilla y r\xe1pida. Una de las caracter\xedsticas m\xe1s poderosas de Express.js son los middlewares, que permiten interceptar y manipular las solicitudes y respuestas HTTP de una aplicaci\xf3n."),(0,i.kt)("h2",{id:"qu\xe9-es-un-middleware"},"\xbfQu\xe9 es un Middleware?"),(0,i.kt)("p",null,"Un middleware en Express.js es una funci\xf3n que recibe tres par\xe1metros: ",(0,i.kt)("inlineCode",{parentName:"p"},"req")," (la solicitud HTTP entrante), ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," (la respuesta HTTP saliente) y ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," (una funci\xf3n que se utiliza para llamar al siguiente middleware en la cadena). La funci\xf3n de un middleware es procesar la solicitud y/o respuesta, y luego llamar a ",(0,i.kt)("inlineCode",{parentName:"p"},"next()")," para pasar el control al siguiente middleware."),(0,i.kt)("p",null,"Los middlewares pueden ser utilizados para muchas cosas, como autenticar usuarios, validar datos, registrar solicitudes, gestionar cookies y sesiones, y mucho m\xe1s. Son una herramienta poderosa y flexible que permite crear aplicaciones web complejas y personalizadas."),(0,i.kt)("h2",{id:"por-qu\xe9-son-importantes"},"\xbfPor qu\xe9 son importantes?"),(0,i.kt)("p",null,"Los middlewares son importantes en Express.js porque permiten a\xf1adir funcionalidades adicionales a una aplicaci\xf3n sin tener que modificar el c\xf3digo de los controladores de ruta (handlers o controllers). Adem\xe1s, los middlewares pueden ser reutilizados en diferentes partes de la aplicaci\xf3n, lo que simplifica el c\xf3digo y reduce la duplicaci\xf3n."),(0,i.kt)("p",null,"Otra ventaja de los middlewares en Express.js es que permiten separar la l\xf3gica de negocio de los detalles de la infraestructura. Esto hace que la aplicaci\xf3n sea m\xe1s f\xe1cil de mantener y escalar, ya que los cambios en la infraestructura no afectan la l\xf3gica de negocio."),(0,i.kt)("h2",{id:"tipos-de-middlewares"},"Tipos de middlewares"),(0,i.kt)("p",null,"En Express.js existen tres tipos de middlewares: internos, de nivel de aplicaci\xf3n y de nivel de enrutador."),(0,i.kt)("p",null,"Los middlewares internos son proporcionados por Express.js y se utilizan para a\xf1adir funcionalidades adicionales a la aplicaci\xf3n, como el manejo de errores o el an\xe1lisis de cuerpos de solicitud. Los middlewares de nivel de aplicaci\xf3n se aplican a todas las rutas de la aplicaci\xf3n, mientras que los middlewares de nivel de enrutador se aplican s\xf3lo a las rutas especificadas."))}p.isMDXComponent=!0}}]);