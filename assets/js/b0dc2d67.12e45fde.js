"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[5022],{3905:(e,n,o)=>{o.d(n,{Zo:()=>c,kt:()=>g});var a=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function t(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?t(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,a,r=function(e,n){if(null==e)return{};var o,a,r={},t=Object.keys(e);for(a=0;a<t.length;a++)o=t[a],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)o=t[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},c=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var o=e.components,r=e.mdxType,t=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(o),p=r,g=d["".concat(i,".").concat(p)]||d[p]||m[p]||t;return o?a.createElement(g,s(s({ref:n},c),{},{components:o})):a.createElement(g,s({ref:n},c))}));function g(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var t=o.length,s=new Array(t);s[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<t;u++)s[u]=o[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,o)}p.displayName="MDXCreateElement"},4650:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>l,toc:()=>u});var a=o(7462),r=(o(7294),o(3905));const t={title:"Conectandonos a MongoDB",slug:"/mongodb-connect",sidebar_position:1},s="Conect\xe1ndonos a MongoDB",l={unversionedId:"modulo08/index",id:"modulo08/index",title:"Conectandonos a MongoDB",description:"Para conectarnos a MongoDB desde nuestra peque\xf1a aplicaci\xf3n con NodeJS, necesitamos primero una URI de conexi\xf3n, la cual se puede obtener siguiente los pasos del m\xf3dulo 07.",source:"@site/docs/modulo08/index.md",sourceDirName:"modulo08",slug:"/mongodb-connect",permalink:"/backend-nodejs-mongodb/mongodb-connect",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo08/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Conectandonos a MongoDB",slug:"/mongodb-connect",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Modulo 08",permalink:"/backend-nodejs-mongodb/category/modulo-08"},next:{title:"Proyecto Final",permalink:"/backend-nodejs-mongodb/category/proyecto-final"}},i={},u=[{value:"\xbfQu\xe9 es un ORM?",id:"qu\xe9-es-un-orm",level:2},{value:"Mongoose",id:"mongoose",level:2},{value:"Schemas",id:"schemas",level:3},{value:"Consultas a la base de datos",id:"consultas-a-la-base-de-datos",level:3},{value:"Relaciones en MongoDB",id:"relaciones-en-mongodb",level:3}],c={toc:u},d="wrapper";function m(e){let{components:n,...o}=e;return(0,r.kt)(d,(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conect\xe1ndonos-a-mongodb"},"Conect\xe1ndonos a MongoDB"),(0,r.kt)("p",null,"Para conectarnos a MongoDB desde nuestra peque\xf1a aplicaci\xf3n con NodeJS, necesitamos primero una URI de conexi\xf3n, la cual se puede obtener siguiente los pasos del ",(0,r.kt)("a",{parentName:"p",href:"/mongodb-setup"},"m\xf3dulo 07"),"."),(0,r.kt)("p",null,"Luego de obtener la URI, tenemos que elegir como nos conectaremos a la base de datos, para ello tenemos dos opciones:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Usar el ",(0,r.kt)("a",{parentName:"li",href:"https://www.mongodb.com/docs/drivers/node/current/quick-start/"},"driver oficial")," de MongoDB"),(0,r.kt)("li",{parentName:"ul"},"Usar un ORM (Object Relational Mapper)")),(0,r.kt)("p",null,"En este caso usaremos un ORM (mongoose), ya que nos permite trabajar con la base de datos de una forma m\xe1s sencilla y nos permite abstraernos de la sintaxis de MongoDB."),(0,r.kt)("h2",{id:"qu\xe9-es-un-orm"},"\xbfQu\xe9 es un ORM?"),(0,r.kt)("p",null,"Los mapeadores objeto-relacional (ORM, por sus siglas en ingl\xe9s) son herramientas que permiten la interacci\xf3n entre bases de datos y nuetras aplicaciones. Estos mapeadores facilitan el proceso de almacenamiento, recuperaci\xf3n y manipulaci\xf3n de datos en un lenguaje de programaci\xf3n determinado. Los ORM eliminan la necesidad de escribir consultas SQL o NoSQL manualmente, ya que proporcionan una capa de abstracci\xf3n que permite interactuar con la base de datos utilizando m\xe9todos y operaciones orientadas a objetos. Al utilizar un ORM, los desarrolladores pueden trabajar con los datos de manera m\xe1s intuitiva y eficiente, abstray\xe9ndose de la complejidad de los detalles de la estructura de la base de datos subyacente. Los ORM tambi\xe9n ofrecen beneficios adicionales, como la generaci\xf3n autom\xe1tica de consultas, la gesti\xf3n de la persistencia y la facilitaci\xf3n de las tareas de mantenimiento y migraci\xf3n de la base de datos"),(0,r.kt)("h2",{id:"mongoose"},"Mongoose"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/"},"Mongoose")," es un ORM para MongoDB en Node.js. Simplifica la interacci\xf3n con la base de datos MongoDB al proporcionar una interfaz sencilla y poderosa para definir esquemas de datos, crear modelos y realizar operaciones de consulta, inserci\xf3n, actualizaci\xf3n y eliminaci\xf3n de documentos. Con Mongoose, puedes trabajar con objetos JavaScript familiares y aprovechar funciones avanzadas como validaciones, hooks y asociaciones entre documentos, facilitando el desarrollo de aplicaciones Node.js con MongoDB."),(0,r.kt)("p",null,"Para instalar mongoose en nuestro proyecto debemos ejecutar el siguiente comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mongoose\n")),(0,r.kt)("h3",{id:"schemas"},"Schemas"),(0,r.kt)("p",null,"En mongoose uno de los conceptos m\xe1s importantes son los ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/guide.html#definition"},"schemas"),", los cuales nos permiten definir la estructura de nuestros documentos. Para crear un schema debemos hacer lo siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose');\n\nconst Schema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: String,\n  password: String,\n});\n\nmodule.exports = mongoose.model('User', Schema);\n")),(0,r.kt)("p",null,"En el ejemplo anterior, creamos un schema para un usuario, el cual tiene los siguientes campos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"age"),(0,r.kt)("li",{parentName:"ul"},"email"),(0,r.kt)("li",{parentName:"ul"},"password")),(0,r.kt)("p",null,"Luego de definir nuestros schemas, creamos un modelo, el cual nos permite interactuar con la base de datos. Para crear un modelo debemos hacer lo siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const model = mongoose.model('<nombre del modelo>', <schema>);\n")),(0,r.kt)("p",null,"Al definir nuestros schemas, podemos agregar algunas opciones que nos permiten definir algunas validaciones, por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose');\n\nconst Schema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    age: {\n      type: Number,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n  },\n);\n\nmodule.exports = mongoose.model('User', Schema);\n")),(0,r.kt)("p",null,"En el ejemplo anterior, agregamos algunas validaciones a nuestros campos, por ejemplo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name: es requerido"),(0,r.kt)("li",{parentName:"ul"},"age: es requerido"),(0,r.kt)("li",{parentName:"ul"},"email: es requerido y debe ser \xfanico"),(0,r.kt)("li",{parentName:"ul"},"password: es requerido")),(0,r.kt)("p",null,"Existen varios tipos de validaciones y opciones que podemos agregar a nuestros schemas, para m\xe1s informaci\xf3n puedes revisar la ",(0,r.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/schematypes.html#schematype-options"},"documentaci\xf3n"),"."),(0,r.kt)("h3",{id:"consultas-a-la-base-de-datos"},"Consultas a la base de datos"),(0,r.kt)("p",null,"Al crear un modelo, podemos realizar diferentes consultas a la base de datos utilizando los m\xe9todos que nos proporciona mongoose, por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const User = require('./models/User');\n\n// Crear un usuario\nconst user = await User.create({\n  name: 'John Doe',\n  age: 30,\n  email: 'test_prueba@gmail.com'\n});\n\n// Obtener todos los usuarios\nconst allUsers = await User.find({});\n\n// Obtener un usuario por su id\nconst userById = await User.findById('id');\n\n// Actualizar un usuario por su id\nconst updatedUser = await User.findByIdAndUpdate('id', { age: 35 }, { new: true });\n\n// Eliminar un usuario por su id\nconst deletedUser = await User.findByIdAndDelete('id');\n")),(0,r.kt)("h3",{id:"relaciones-en-mongodb"},"Relaciones en MongoDB"),(0,r.kt)("p",null,"En MongoDB no existen las relaciones como tal, pero podemos simularlas utilizando referencias. Para ello, debemos agregar un campo en nuestro schema que haga referencia a otro schema, por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    age: {\n      type: Number,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    posts: [\n      {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Post',\n      },\n    ],\n  },\n);\n\nmodule.exports = mongoose.model('User', UserSchema);\n")),(0,r.kt)("p",null,"En el ejemplo anterior, agregamos un campo llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"posts"),", el cual es un arreglo de ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjectId")," que hace referencia a un ",(0,r.kt)("inlineCode",{parentName:"p"},"Post"),"."),(0,r.kt)("p",null,"Luego de agregar el campo, podemos realizar consultas a la base de datos para obtener los posts de un usuario, por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const user = await User.findById('id').populate('posts');\n")),(0,r.kt)("p",null,"En el ejemplo anterior, obtenemos un usuario por su id y luego utilizamos el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"populate")," para obtener los posts del usuario."))}m.isMDXComponent=!0}}]);