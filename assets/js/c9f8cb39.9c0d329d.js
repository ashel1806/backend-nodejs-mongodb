"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[210],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>v});var o=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function t(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,o,a=function(e,r){if(null==e)return{};var n,o,a={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var r=o.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=s(e.components);return o.createElement(c.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var n=e.components,a=e.mdxType,t=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||t;return n?o.createElement(v,i(i({ref:r},u),{},{components:n})):o.createElement(v,i({ref:r},u))}));function v(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var t=n.length,i=new Array(t);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<t;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6142:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const t={title:"Manipulaci\xf3n de archivos",slug:"/node-files",sidebar_position:6},i=void 0,l={unversionedId:"modulo03/files",id:"modulo03/files",title:"Manipulaci\xf3n de archivos",description:"La manipulaci\xf3n de archivos es una tarea com\xfan en la programaci\xf3n, y Node.js proporciona un conjunto completo de API para trabajar con archivos y directorios. En este art\xedculo, exploraremos c\xf3mo trabajar con archivos en Node.js, incluyendo la creaci\xf3n, lectura, escritura y eliminaci\xf3n de archivos.",source:"@site/docs/modulo03/files.md",sourceDirName:"modulo03",slug:"/node-files",permalink:"/backend-nodejs-mongodb/node-files",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb.git/docs/modulo03/files.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Manipulaci\xf3n de archivos",slug:"/node-files",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Crear una API",permalink:"/backend-nodejs-mongodb/node-api"},next:{title:"Modulo 04",permalink:"/backend-nodejs-mongodb/category/modulo-04"}},c={},s=[{value:"Creaci\xf3n de archivos",id:"creaci\xf3n-de-archivos",level:2},{value:"Lectura de archivos",id:"lectura-de-archivos",level:2},{value:"Escritura en archivos",id:"escritura-en-archivos",level:2},{value:"Eliminaci\xf3n de un archivo",id:"eliminaci\xf3n-de-un-archivo",level:2},{value:"Copia de archivos en Node.js",id:"copia-de-archivos-en-nodejs",level:2}],u={toc:s},d="wrapper";function p(e){let{components:r,...n}=e;return(0,a.kt)(d,(0,o.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"La manipulaci\xf3n de archivos es una tarea com\xfan en la programaci\xf3n, y Node.js proporciona un conjunto completo de API para trabajar con archivos y directorios. En este art\xedculo, exploraremos c\xf3mo trabajar con archivos en Node.js, incluyendo la creaci\xf3n, lectura, escritura y eliminaci\xf3n de archivos."),(0,a.kt)("h2",{id:"creaci\xf3n-de-archivos"},"Creaci\xf3n de archivos"),(0,a.kt)("p",null,"Para crear un archivo en Node.js, podemos utilizar el m\xf3dulo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs")," (file system). El m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.writeFile()")," se utiliza para crear un archivo y escribir contenido en \xe9l. Este m\xe9todo toma tres argumentos: el nombre del archivo que se va a crear, el contenido que se va a escribir y un callback que se ejecutar\xe1 una vez que se complete la escritura."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\nfs.writeFile('ejemplo.txt', 'Este es el contenido del archivo.', function(err) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('El archivo fue creado correctamente.');\n  }\n});\n")),(0,a.kt)("p",null,"En el ejemplo anterior, se crea un archivo llamado ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo.txt")," y se escribe el contenido ",(0,a.kt)("strong",{parentName:"p"},"Este es el contenido del archivo.")," en \xe9l. Si se produce alg\xfan error durante la escritura, se muestra un mensaje de error. De lo contrario, se muestra un mensaje de \xe9xito."),(0,a.kt)("h2",{id:"lectura-de-archivos"},"Lectura de archivos"),(0,a.kt)("p",null,"Para leer el contenido de un archivo en Node.js, podemos utilizar el m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.readFile()"),". Este m\xe9todo toma dos argumentos: el nombre del archivo que se va a leer y un callback que se ejecutar\xe1 una vez que se complete la lectura."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\nfs.readFile('ejemplo.txt', function(err, data) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data.toString());\n  }\n});\n")),(0,a.kt)("p",null,"En el ejemplo anterior, se lee el contenido del archivo ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo.txt")," utilizando el m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.readFile()"),". Si se produce alg\xfan error durante la lectura, se muestra un mensaje de error. De lo contrario, se muestra el contenido del archivo en la consola."),(0,a.kt)("h2",{id:"escritura-en-archivos"},"Escritura en archivos"),(0,a.kt)("p",null,"Para escribir contenido en un archivo existente en Node.js, podemos utilizar el m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.writeFile()")," que ya vimos anteriormente"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\nfs.writeFile('ejemplo.txt', 'Este es el nuevo contenido del archivo.', function(err) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('El archivo fue actualizado correctamente.');\n  }\n});\n")),(0,a.kt)("p",null,"En el ejemplo anterior, se escribe el nuevo contenido ",(0,a.kt)("strong",{parentName:"p"},"Este es el nuevo contenido del archivo.")," en el archivo ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo.txt"),". Si se produce alg\xfan error durante la escritura, se muestra un mensaje de error. De lo contrario, se muestra un mensaje de \xe9xito."),(0,a.kt)("h2",{id:"eliminaci\xf3n-de-un-archivo"},"Eliminaci\xf3n de un archivo"),(0,a.kt)("p",null,"Para eliminar un archivo en Node.js, podemos utilizar el m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.unlink()"),". Este m\xe9todo toma dos argumentos: el nombre del archivo que se va a eliminar y un callback que se ejecutar\xe1 una vez que se complete la eliminaci\xf3n."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\nfs.unlink('ejemplo.txt', function(err) {\n  if (err) {\n    console.error(err)\n  } else {\n    console.log('El archivo fue eliminado correctamente.');\n  }\n});\n")),(0,a.kt)("p",null,"En el ejemplo anterior, se elimina el archivo ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo.txt"),". Si se produce alg\xfan error durante la eliminaci\xf3n, se muestra un mensaje de error. De lo contrario, se muestra un mensaje de \xe9xito."),(0,a.kt)("h2",{id:"copia-de-archivos-en-nodejs"},"Copia de archivos en Node.js"),(0,a.kt)("p",null,"Para copiar un archivo en Node.js, podemos utilizar el m\xe9todo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs.copyFile()"),". Este m\xe9todo toma tres argumentos: el nombre del archivo que se va a copiar, el nombre del archivo de destino y una funci\xf3n de devoluci\xf3n de llamada que se ejecutar\xe1 una vez que se complete la copia."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const fs = require('fs');\n\nfs.copyFile('ejemplo.txt', 'ejemplo-copia.txt', function(err) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('El archivo fue copiado correctamente.');\n  }\n});\n")),(0,a.kt)("p",null,"En el ejemplo anterior, se copia el archivo ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo.txt")," en un nuevo archivo llamado ",(0,a.kt)("inlineCode",{parentName:"p"},"ejemplo-copia.txt"),". Si se produce alg\xfan error durante la copia, se muestra un mensaje de error. De lo contrario, se muestra un mensaje de \xe9xito."))}p.isMDXComponent=!0}}]);