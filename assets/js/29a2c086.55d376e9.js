"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[566],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var o=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,o)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,o,t=function(e,n){if(null==e)return{};var a,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=o.createContext({}),i=function(e){var n=o.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=i(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=i(a),d=t,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return a?o.createElement(f,s(s({ref:n},c),{},{components:a})):o.createElement(f,s({ref:n},c))}));function f(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,s=new Array(r);s[0]=d;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[m]="string"==typeof e?e:t,s[1]=u;for(var i=2;i<r;i++)s[i]=a[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4305:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>i});var o=a(7462),t=(a(7294),a(3905));const r={title:"Funciones",slug:"/functions",description:"Pedazos de c\xf3digo que podemos reutilizar",sidebar_position:4},s=void 0,u={unversionedId:"modulo01/functions",id:"modulo01/functions",title:"Funciones",description:"Pedazos de c\xf3digo que podemos reutilizar",source:"@site/docs/modulo01/functions.md",sourceDirName:"modulo01",slug:"/functions",permalink:"/backend-nodejs-mongodb/functions",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo01/functions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Funciones",slug:"/functions",description:"Pedazos de c\xf3digo que podemos reutilizar",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Tipos de datos",permalink:"/backend-nodejs-mongodb/data-types"},next:{title:"Operadores",permalink:"/backend-nodejs-mongodb/operators"}},l={},i=[{value:"\xbfQu\xe9 es una funci\xf3n?",id:"qu\xe9-es-una-funci\xf3n",level:2},{value:"\xbfC\xf3mo se llama a una funci\xf3n?",id:"c\xf3mo-se-llama-a-una-funci\xf3n",level:2},{value:"Par\xe1metros y argumentos",id:"par\xe1metros-y-argumentos",level:2},{value:"Retorno",id:"retorno",level:2},{value:"Funciones an\xf3nimas",id:"funciones-an\xf3nimas",level:2},{value:"Funciones flecha",id:"funciones-flecha",level:2},{value:"Funciones recursivas",id:"funciones-recursivas",level:2},{value:"Funciones de primera clase",id:"funciones-de-primera-clase",level:2}],c={toc:i},m="wrapper";function p(e){let{components:n,...a}=e;return(0,t.kt)(m,(0,o.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"qu\xe9-es-una-funci\xf3n"},"\xbfQu\xe9 es una funci\xf3n?"),(0,t.kt)("p",null,"Una funci\xf3n es un bloque de c\xf3digo que realiza una tarea espec\xedfica y puede ser reutilizado m\xfaltiples veces en un programa. Las funciones son una de las caracter\xedsticas m\xe1s importantes y poderosas del lenguaje de programaci\xf3n JavaScript, y son esenciales para construir programas complejos y escalables."),(0,t.kt)("p",null,'Las funciones en JavaScript se definen utilizando la palabra clave "function", seguida del nombre de la funci\xf3n, seguida de par\xe9ntesis que pueden o no contener argumentos separados por comas, y finalmente un bloque de c\xf3digo que contiene las instrucciones que se ejecutar\xe1n cada vez que se llame a la funci\xf3n.'),(0,t.kt)("p",null,"Por ejemplo, aqu\xed hay una funci\xf3n simple que toma dos argumentos, los suma y devuelve el resultado:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function sum(a, b) {\n  return a + b;\n}\n")),(0,t.kt)("p",null,'En este ejemplo, "sumar" es el nombre de la funci\xf3n, "num1" y "num2" son los argumentos que se pasan a la funci\xf3n, y "return" indica que la funci\xf3n devolver\xe1 el resultado de la suma de los dos argumentos.'),(0,t.kt)("admonition",{title:"Consejo de Conejo",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'Los nombres de las funciones que creemos deben ser descriptivos, es decir, que nos indiquen qu\xe9 hace la funci\xf3n. Por ejemplo, si la funci\xf3n suma dos n\xfameros, el nombre de la funci\xf3n podr\xeda ser "sumar".'),(0,t.kt)("p",{parentName:"admonition"},"Adicionalmene, debemos cuidar que cada funci\xf3n haga una sola cosa, es decir, que no haga m\xe1s de una cosa. Por ejemplo, si la funci\xf3n suma dos n\xfameros, no deber\xeda imprimir el resultado en la consola.")),(0,t.kt)("h2",{id:"c\xf3mo-se-llama-a-una-funci\xf3n"},"\xbfC\xf3mo se llama a una funci\xf3n?"),(0,t.kt)("p",null,"Para llamar a una funci\xf3n, se escribe el nombre de la funci\xf3n seguido de par\xe9ntesis que pueden o no contener argumentos separados por comas."),(0,t.kt)("p",null,'Usando el ejemplo anterior, aqu\xed hay una llamada a la funci\xf3n "sumar":'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const result = sum(1, 2); // 3\n\nconsole.log(result); // 3\n")),(0,t.kt)("p",null,'En este ejemplo, "result" es una variable que almacena el resultado de la funci\xf3n "sumar".'),(0,t.kt)("h2",{id:"par\xe1metros-y-argumentos"},"Par\xe1metros y argumentos"),(0,t.kt)("p",null,"Los par\xe1metros son las variables que se declaran en la definici\xf3n de la funci\xf3n. Los argumentos son los valores que se pasan a la funci\xf3n cuando se llama a la funci\xf3n."),(0,t.kt)("p",null,'Por ejemplo, en la funci\xf3n "sum", "a" y "b" son ',(0,t.kt)("strong",{parentName:"p"},"par\xe1metros"),', y "1" y "2" son ',(0,t.kt)("strong",{parentName:"p"},"argumentos"),"."),(0,t.kt)("h2",{id:"retorno"},"Retorno"),(0,t.kt)("p",null,"La palabra clave ",(0,t.kt)("inlineCode",{parentName:"p"},"return")," se usa para devolver un valor desde una funci\xf3n."),(0,t.kt)("p",null,'Por ejemplo, en la funci\xf3n "sum", "return" devuelve el resultado de la suma de los dos argumentos.'),(0,t.kt)("h2",{id:"funciones-an\xf3nimas"},"Funciones an\xf3nimas"),(0,t.kt)("p",null,"Este tipo de funciones no tienen nombre y se asignan a una variable. Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const sum = function (a, b) {\n  return a + b;\n};\n")),(0,t.kt)("p",null,'En este ejemplo, la funci\xf3n se asigna a la variable "sum". Luego, la funci\xf3n se puede llamar usando la variable "sum":'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const result = sum(1, 2); // 3\n")),(0,t.kt)("admonition",{title:"Ojo",type:"info"},(0,t.kt)("p",{parentName:"admonition"},"Si bien las funciones an\xf3nimas no parecen tener mucho sentido, estas suelen ser \xfatiles cuando se pasan como argumentos a otras funciones."),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const sum = function (a, b) {\n  return a + b;\n};\n\nfunction calculate(a, b, operation) {\n  return operation(a, b);\n}\n\nconst result = calculate(1, 2, sum); // 3\n")),(0,t.kt)("p",{parentName:"admonition"},'Aqu\xed vemos que la funci\xf3n "calculate" recibe como argumento una funci\xf3n llamada "operation". Luego, la funci\xf3n "calculate" llama a la funci\xf3n "operation" pas\xe1ndole los argumentos "a" y "b".'),(0,t.kt)("p",{parentName:"admonition"},"Este concepto es muy \xfatil cuando estamos trabajando con callbacks, que veremos m\xe1s adelante.")),(0,t.kt)("h2",{id:"funciones-flecha"},"Funciones flecha"),(0,t.kt)("p",null,"Las funciones flecha son una forma m\xe1s corta de escribir funciones an\xf3nimas. Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const sum = (a, b) => {\n  return a + b;\n};\n")),(0,t.kt)("p",null,'En este ejemplo vemos que la funci\xf3n se asigna a la variable "sum", y adem\xe1s se est\xe1 haciendo uso del operador ',(0,t.kt)("strong",{parentName:"p"},"flecha")," ",(0,t.kt)("inlineCode",{parentName:"p"},"=>"),"."),(0,t.kt)("admonition",{title:"Ojo",type:"info"},(0,t.kt)("p",{parentName:"admonition"},"Si la funci\xf3n flecha solo tiene una l\xednea de c\xf3digo, podemos omitir las llaves y el return."),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const sum = (a, b) => a + b;\n\n// es equivalente a\n\nconst sum = (a, b) => {\n  return a + b;\n};\n")),(0,t.kt)("p",{parentName:"admonition"},"Y, si la funci\xf3n flecha solo tiene un par\xe1metro, podemos omitir los par\xe9ntesis."),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const square = a => a * a;\n\n// es equivalente a\n\nconst square = (a) => a * a;\n"))),(0,t.kt)("h2",{id:"funciones-recursivas"},"Funciones recursivas"),(0,t.kt)("p",null,"Una funci\xf3n recursiva es una funci\xf3n que se llama a s\xed misma. Este tipo de funciones son \xfatiles cuando queremos que un proceso se repita hasta que se cumpla una condici\xf3n de salida.Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function countDown(number) {\n  if (number === 0) {\n    return;\n  }\n\n  console.log(number);\n\n  countDown(number - 1);\n}\n\ncountDown(3);\n// 3\n// 2\n// 1\n")),(0,t.kt)("p",null,'En este ejemplo, la funci\xf3n "countDown" se llama a s\xed misma hasta que el argumento "number" sea igual a 0.'),(0,t.kt)("h2",{id:"funciones-de-primera-clase"},"Funciones de primera clase"),(0,t.kt)("p",null,"Las funciones de primera clase son funciones que se pueden asignar a variables, pasar como argumentos a otras funciones, y devolver como resultado de otras funciones."),(0,t.kt)("p",null,"Por ejemplo, aqu\xed tenemos una funci\xf3n que recibe como argumento otra funci\xf3n:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction calculate(a, b, operation) {\n  return operation(a, b);\n}\n\nconst result = calculate(1, 2, sum); // 3\n")),(0,t.kt)("p",null,"Aqu\xed tenemos otro ejemplo donde la funci\xf3n se devuelve como resultado de otra funci\xf3n:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function sum(a, b) {\n  return a + b;\n}\n\nfunction calculate(a, b, operation) {\n  return operation(a, b);\n}\n\nfunction getOperation() {\n  return sum;\n}\n\nconst result = calculate(1, 2, getOperation()); // 3\n")),(0,t.kt)("p",null,"Y por \xfaltimo, aqu\xed tenemos un ejemplo donde la funci\xf3n se asigna a una variable:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"function sum(a, b) {\n  return a + b;\n}\n\nconst operation = sum;\n\nconst result = operation(1, 2); // 3\n")))}p.isMDXComponent=!0}}]);