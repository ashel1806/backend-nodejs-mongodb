"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[58],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var u=a.createContext({}),l=function(e){var n=a.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=l(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),m=t,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||s;return r?a.createElement(f,o(o({ref:n},p),{},{components:r})):a.createElement(f,o({ref:n},p))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:t,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1651:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(7462),t=(r(7294),r(3905));const s={title:"Enrutamiento",slug:"/routing",sidebar_position:2},o="Manejo de rutas en Express.js",i={unversionedId:"modulo04/routing",id:"modulo04/routing",title:"Enrutamiento",description:"El enrutamiento en Express.js se refiere a la definici\xf3n de rutas que corresponden a diferentes solicitudes HTTP (GET, POST, PUT, DELETE, etc.).",source:"@site/docs/modulo04/routing.md",sourceDirName:"modulo04",slug:"/routing",permalink:"/backend-nodejs-mongodb/routing",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb.git/docs/modulo04/routing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Enrutamiento",slug:"/routing",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Express",permalink:"/backend-nodejs-mongodb/intro-expressjs"},next:{title:"Middlewares",permalink:"/backend-nodejs-mongodb/middlewares"}},u={},l=[{value:"Definici\xf3n de Rutas",id:"definici\xf3n-de-rutas",level:2},{value:"Par\xe1metros de ruta y consultas (queries)",id:"par\xe1metros-de-ruta-y-consultas-queries",level:2}],p={toc:l},d="wrapper";function c(e){let{components:n,...r}=e;return(0,t.kt)(d,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"manejo-de-rutas-en-expressjs"},"Manejo de rutas en Express.js"),(0,t.kt)("p",null,"El enrutamiento en Express.js se refiere a la definici\xf3n de rutas que corresponden a diferentes solicitudes HTTP (GET, POST, PUT, DELETE, etc.)."),(0,t.kt)("h2",{id:"definici\xf3n-de-rutas"},"Definici\xf3n de Rutas"),(0,t.kt)("p",null,"En Express.js, las rutas se definen utilizando m\xe9todos del objeto ",(0,t.kt)("inlineCode",{parentName:"p"},"app")," que corresponden a las diferentes solicitudes HTTP. Cada uno de estos m\xe9todos reciben una funci\xf3n callback como argumento  que se encargar\xe1 de manejar la solicitud y la respuesta de una petici\xf3n (generalmente se les conoce como ",(0,t.kt)("strong",{parentName:"p"},"controlladores")," o ",(0,t.kt)("strong",{parentName:"p"},"manejadores"),"), veamos un ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hola, mundo!');\n});\n")),(0,t.kt)("p",null,"En este ejemplo, definimos una ruta que responde a una solicitud HTTP GET a la ra\xedz ",(0,t.kt)("inlineCode",{parentName:"p"},"(/)"),' de nuestra aplicaci\xf3n. Cuando un usuario visita la p\xe1gina principal de nuestra aplicaci\xf3n, el callback se ejecuta y env\xeda una respuesta al cliente con el mensaje "Hola, mundo!".'),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, res) => {\n  res.send('Este es un ejemplo de una solicitud GET');\n});\n\napp.post('/', (req, res) => {\n  res.send('Este es un ejemplo de una solicitud POST');\n});\n\napp.put('/', (req, res) => {\n  res.send('Este es un ejemplo de una solicitud PUT');\n});\n\napp.delete('/', (req, res) => {\n  res.send('Este es un ejemplo de una solicitud DELETE');\n});\n")),(0,t.kt)("p",null,'En este ejemplo, definimos rutas para cada uno de los m\xe9todos HTTP. Cuando un usuario visita la p\xe1gina principal de nuestra aplicaci\xf3n y env\xeda una solicitud GET, la funci\xf3n de devoluci\xf3n de llamada asociada a la ruta GET se ejecuta y env\xeda una respuesta al cliente con el mensaje "Este es un ejemplo de una solicitud GET". Lo mismo ocurre con las solicitudes POST, PUT y DELETE.'),(0,t.kt)("h2",{id:"par\xe1metros-de-ruta-y-consultas-queries"},"Par\xe1metros de ruta y consultas (queries)"),(0,t.kt)("p",null,"En Express.js, podemos definir par\xe1metros de ruta para capturar valores espec\xedficos en una solicitud. Por ejemplo, podemos definir una ruta que capture el ID de un usuario en una solicitud GET de la siguiente manera:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/users/:id', (req, res) => {\n  res.send(`El ID del usuario es ${req.params.id}`);\n});\n")),(0,t.kt)("p",null,"En este ejemplo, definimos una ruta para una solicitud GET a ",(0,t.kt)("inlineCode",{parentName:"p"},"/users/:id"),". Cuando un usuario visita esta ruta, el valor del par\xe1metro ",(0,t.kt)("inlineCode",{parentName:"p"},"id")," se captura y se utiliza en el callback para enviar una respuesta al cliente."),(0,t.kt)("p",null,"Tambi\xe9n podemos manejar las consultas (queries) en una solicitud utilizando el objeto ",(0,t.kt)("inlineCode",{parentName:"p"},"req.query"),". Por ejemplo, si un usuario env\xeda una solicitud GET a ",(0,t.kt)("inlineCode",{parentName:"p"},"/search?q=Express"),", podemos capturar el valor ",(0,t.kt)("strong",{parentName:"p"},"Express")," utilizando ",(0,t.kt)("inlineCode",{parentName:"p"},"req.query.q")," de la siguiente manera:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/search', (req, res) => {\n  res.send(`La consulta de b\xfasqueda es ${req.query.q}`);\n});\n")))}c.isMDXComponent=!0}}]);