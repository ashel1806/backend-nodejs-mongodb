"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[6345],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(t),c=o,g=u["".concat(d,".").concat(c)]||u[c]||m[c]||r;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=c;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const r={title:"Tipos de datos",slug:"/data-types",description:"number, String, Boolean, null, undefined, Symbol, BigInt",sidebar_position:3},l="Tipos de datos",i={unversionedId:"modulo01/data-types",id:"modulo01/data-types",title:"Tipos de datos",description:"number, String, Boolean, null, undefined, Symbol, BigInt",source:"@site/docs/modulo01/data-types.md",sourceDirName:"modulo01",slug:"/data-types",permalink:"/backend-nodejs-mongodb/data-types",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo01/data-types.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Tipos de datos",slug:"/data-types",description:"number, String, Boolean, null, undefined, Symbol, BigInt",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/backend-nodejs-mongodb/variables"},next:{title:"Funciones",permalink:"/backend-nodejs-mongodb/functions"}},d={},s=[{value:"Tipos de datos primitivos",id:"tipos-de-datos-primitivos",level:2},{value:"number",id:"number",level:3},{value:"String",id:"string",level:3},{value:"Boolean",id:"boolean",level:3},{value:"null",id:"null",level:3},{value:"undefined",id:"undefined",level:3},{value:"Symbol",id:"symbol",level:3},{value:"BigInt",id:"bigint",level:3},{value:"Tipos de datos de referencia",id:"tipos-de-datos-de-referencia",level:2},{value:"Object",id:"object",level:3},{value:"Array",id:"array",level:3},{value:"typeof",id:"typeof",level:2}],p={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tipos-de-datos"},"Tipos de datos"),(0,o.kt)("p",null,"En Javascript tenemos dos grupos de tipos de datos:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tipos de datos primitivos"),(0,o.kt)("li",{parentName:"ul"},"Tipos de datos de referencia")),(0,o.kt)("h2",{id:"tipos-de-datos-primitivos"},"Tipos de datos primitivos"),(0,o.kt)("p",null,"Los tipos de datos primitivos son tipos de datos que no tienen propiedades ni m\xe9todos. Los tipos de datos primitivos son:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"number"),(0,o.kt)("li",{parentName:"ul"},"String"),(0,o.kt)("li",{parentName:"ul"},"Boolean"),(0,o.kt)("li",{parentName:"ul"},"null"),(0,o.kt)("li",{parentName:"ul"},"undefined"),(0,o.kt)("li",{parentName:"ul"},"Symbol"),(0,o.kt)("li",{parentName:"ul"},"BigInt")),(0,o.kt)("h3",{id:"number"},"number"),(0,o.kt)("p",null,"El tipo de dato number representa n\xfameros. Los n\xfameros pueden ser enteros o decimales, positivos o negativos."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let number = 1;\nlet otherNumber = 1.1;\nlet negativeNumber = -1;\n")),(0,o.kt)("admonition",{title:"Recuerda",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Existen otros tipos ",(0,o.kt)("strong",{parentName:"p"},'"especiales"')," de ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),": Infinity, -Infinity y NaN."),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Infinity")," representa el infinito positivo."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-Infinity")," representa el infinito negativo."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NaN")," representa un valor no num\xe9rico.")),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let infinity = Infinity;\nlet negativeInfinity = -Infinity;\nlet notANumber = NaN;\n"))),(0,o.kt)("h3",{id:"string"},"String"),(0,o.kt)("p",null,"El tipo de dato String representa cadenas de caracteres. Las cadenas de caracteres pueden estar formadas por letras, n\xfameros, s\xedmbolos, espacios, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let string = "Hola mundo";\nlet stringWithQuotes = "Hola \'mundo\'"; // Hola \'mundo\'\nlet stringWithDoubleQuotes = \'Hola "mundo"\'; // Hola "mundo"\n')),(0,o.kt)("p",null,"Podemos utilizar la concatenaci\xf3n de cadenas de caracteres para unir cadenas de caracteres."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let string = "Hola";\nlet otherString = "mundo";\n\nlet concatenatedString = string + " " + otherString;\n\nconsole.log(concatenatedString); // Hola mundo\n')),(0,o.kt)("p",null,'Podemos usar variables dentro de las cadenas de caracteres. Esto se conoce como "String literals" y hacen uso de las comillas invertidas (``) y el s\xedmbolo "$"".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let string = "Hola";\nlet otherString = "mundo";\n\nlet concatenatedString = `${string} ${otherString}`;\n\nconsole.log(concatenatedString); // Hola mundo\n')),(0,o.kt)("h3",{id:"boolean"},"Boolean"),(0,o.kt)("p",null,"El tipo de dato Boolean representa un valor l\xf3gico. El valor l\xf3gico puede ser verdadero o falso."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let boolean = true;\nlet otherBoolean = false;\n")),(0,o.kt)("h3",{id:"null"},"null"),(0,o.kt)("p",null,"El tipo de dato null representa un valor nulo. El valor nulo es un valor especial que representa la ausencia de valor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let nullValue = null;\n")),(0,o.kt)("h3",{id:"undefined"},"undefined"),(0,o.kt)("p",null,"El tipo de dato undefined representa un valor indefinido. El valor indefinido es un valor especial que representa la ausencia de valor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nlet undefinedValue = undefined;\n")),(0,o.kt)("admonition",{title:"Nota",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"El valor undefined es el valor por defecto de las variables."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let undefinedValue;\n\nconsole.log(undefinedValue); // undefined\n"))),(0,o.kt)("h3",{id:"symbol"},"Symbol"),(0,o.kt)("p",null,"El tipo de dato Symbol representa un valor \xfanico e inmutable. El valor \xfanico e inmutable es un valor especial que representa un valor \xfanico e inmutable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let symbol = Symbol("symbol");\nlet anotherSymbol = Symbol("symbol");\n\nconsole.log(symbol === anotherSymbol); // false\n')),(0,o.kt)("h3",{id:"bigint"},"BigInt"),(0,o.kt)("p",null,"El tipo de dato BigInt representa n\xfameros enteros de cualquier tama\xf1o. Los n\xfameros enteros de cualquier tama\xf1o pueden ser positivos o negativos."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let bigInt = 1n;\nlet otherBigInt = -1n;\nlet bigNumber = 1234567890123456789012345678901234567890n;\n")),(0,o.kt)("h2",{id:"tipos-de-datos-de-referencia"},"Tipos de datos de referencia"),(0,o.kt)("p",null,"Los tipos de datos de referencia son tipos de datos que tienen propiedades y m\xe9todos. Los tipos de datos de referencia son:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Object"),(0,o.kt)("li",{parentName:"ul"},"Array"),(0,o.kt)("li",{parentName:"ul"},"Function")),(0,o.kt)("h3",{id:"object"},"Object"),(0,o.kt)("p",null,"El tipo de dato Object representa un objeto. Un objeto es una colecci\xf3n de propiedades. Cada propiedad tiene un nombre y un valor. El valor de una propiedad puede ser un valor primitivo o un objeto."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let object = {\n  name: "John",\n  age: 30,\n  isMarried: false,\n};\n')),(0,o.kt)("p",null,"Para poder acceder a una propiedad de un objeto podemos utilizar la notaci\xf3n de punto (.) o la notaci\xf3n de corchetes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'console.log(object.name); // John\nconsole.log(object["name"]); // John\n')),(0,o.kt)("admonition",{title:"Aviso",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Si una propiedad no est\xe1 definidida en un objeto, el valor de la propiedad ser\xe1 undefined."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(object.lastName); // undefined\n")),(0,o.kt)("p",{parentName:"admonition"},"Si asignamos un valor a una propiedad que no est\xe1 definida en un objeto, se crear\xe1 una nueva propiedad en el objeto de manera autom\xe1tica."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'object.lastName = "Doe";\n\nconsole.log(object.lastName); // Doe\n'))),(0,o.kt)("h3",{id:"array"},"Array"),(0,o.kt)("p",null,"El tipo de dato Array representa una lista de elementos, y puede contener cualquier tipo de dato."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let array = [1, 2, 3, 4, 5];\nlet otherArray = ["Hola", "mundo"];\nlet mixedArray = [1, "Hola", true];\nlet arrayWithObjects = [\n  {\n    name: "John",\n    age: 30,\n    isMarried: false,\n  },\n  {\n    name: "Jane",\n    age: 25,\n    isMarried: true,\n  },\n];\n')),(0,o.kt)("p",null,"Para poder acceder a un elemento de un array podemos utilizar la notaci\xf3n de corchetes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'console.log(array[0]); // 1\nconsole.log(otherArray[1]); // "mundo"\nconsole.log(mixedArray[2]); // true\nconsole.log(arrayWithObjects[0].name); // "John"\n')),(0,o.kt)("admonition",{title:"Recuerda",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Los \xedndices de los arrays empiezan en 0, es decir, el primer elemento de un array tiene el \xedndice 0."),(0,o.kt)("p",{parentName:"admonition"},"Por ejemplo, si tenemos el siguiente array:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let array = [1, 2, 3, 4, 5];\n")),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"El primer elemento del array es 1, y tiene el \xedndice 0."),(0,o.kt)("li",{parentName:"ul"},"El segundo elemento del array es 2, y tiene el \xedndice 1."),(0,o.kt)("li",{parentName:"ul"},"El tercer elemento del array es 3, y tiene el \xedndice 2."),(0,o.kt)("li",{parentName:"ul"},"El cuarto elemento del array es 4, y tiene el \xedndice 3."),(0,o.kt)("li",{parentName:"ul"},"El quinto elemento del array es 5, y tiene el \xedndice 4."))),(0,o.kt)("h2",{id:"typeof"},"typeof"),(0,o.kt)("p",null,"Podemos utilizar la funci\xf3n typeof para obtener el tipo de dato de una variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let number = 1;\n\nconsole.log(typeof number); // number\n")),(0,o.kt)("admonition",{title:"Nota",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"La funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"typeof")," devuelve un string con el nombre del tipo de dato y puede o no, llevar par\xe9ntesis."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"console.log(typeof number); // number\nconsole.log(typeof(number)); // number\n"))))}m.isMDXComponent=!0}}]);