"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[4309],{3905:(e,n,o)=>{o.d(n,{Zo:()=>c,kt:()=>g});var a=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function t(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,a,r=function(e,n){if(null==e)return{};var o,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)o=l[a],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)o=l[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):t(t({},n),e)),o},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var o=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(o),p=r,g=m["".concat(s,".").concat(p)]||m[p]||d[p]||l;return o?a.createElement(g,t(t({ref:n},c),{},{components:o})):a.createElement(g,t({ref:n},c))}));function g(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=o.length,t=new Array(l);t[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:r,t[1]=i;for(var u=2;u<l;u++)t[u]=o[u];return a.createElement.apply(null,t)}return a.createElement.apply(null,o)}p.displayName="MDXCreateElement"},6756:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=o(7462),r=(o(7294),o(3905));const l={title:"Estructuras de control",slug:"/control-structures",description:"Estructuras que nos permiten realizar acciones condicionales o repetitivas",sidebar_position:6},t=void 0,i={unversionedId:"modulo01/control-structures",id:"modulo01/control-structures",title:"Estructuras de control",description:"Estructuras que nos permiten realizar acciones condicionales o repetitivas",source:"@site/docs/modulo01/control-structures.md",sourceDirName:"modulo01",slug:"/control-structures",permalink:"/backend-nodejs-mongodb/control-structures",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo01/control-structures.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Estructuras de control",slug:"/control-structures",description:"Estructuras que nos permiten realizar acciones condicionales o repetitivas",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Operadores",permalink:"/backend-nodejs-mongodb/operators"},next:{title:"Modulo 02",permalink:"/backend-nodejs-mongodb/category/modulo-02"}},s={},u=[{value:"Condicionales",id:"condicionales",level:2},{value:"if",id:"if",level:3},{value:"if...else",id:"ifelse",level:3},{value:"if...else if...else",id:"ifelse-ifelse",level:3},{value:"switch",id:"switch",level:3},{value:"Bucles",id:"bucles",level:2},{value:"while",id:"while",level:3},{value:"do...while",id:"dowhile",level:3},{value:"for",id:"for",level:3},{value:"for...in",id:"forin",level:3},{value:"for...of",id:"forof",level:3}],c={toc:u},m="wrapper";function d(e){let{components:n,...o}=e;return(0,r.kt)(m,(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"condicionales"},"Condicionales"),(0,r.kt)("h3",{id:"if"},"if"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," nos permite ejecutar un bloque de c\xf3digo si una condici\xf3n se cumple."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"if (condicion) {\n  // Bloque de c\xf3digo que se ejecuta si la condici\xf3n se cumple\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir un mensaje en la consola si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es mayor a 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let numero = 10;\n\nif (numero > 5) {\n  console.log("El n\xfamero es mayor a 5");\n}\n\n// El n\xfamero es mayor a 5\n')),(0,r.kt)("h3",{id:"ifelse"},"if...else"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else")," nos permite ejecutar un bloque de c\xf3digo si una condici\xf3n se cumple, y otro bloque de c\xf3digo si la condici\xf3n no se cumple."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"if (condicion) {\n  // Bloque de c\xf3digo que se ejecuta si la condici\xf3n se cumple\n} else {\n  // Bloque de c\xf3digo que se ejecuta si la condici\xf3n no se cumple\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir un mensaje en la consola si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es mayor a 5, y otro mensaje si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es menor o igual a 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let numero = 3;\n\nif (numero > 5) {\n  console.log("El n\xfamero es mayor a 5");\n} else {\n  console.log("El n\xfamero es menor o igual a 5");\n}\n\n// El n\xfamero es menor o igual a 5\n')),(0,r.kt)("h3",{id:"ifelse-ifelse"},"if...else if...else"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else if...else")," nos permite ejecutar un bloque de c\xf3digo si una condici\xf3n se cumple, otro bloque de c\xf3digo si otra condici\xf3n se cumple, y otro bloque de c\xf3digo si ninguna de las condiciones se cumple."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"if (condicion1) {\n  // Bloque de c\xf3digo que se ejecuta si la condici\xf3n 1 se cumple\n} else if (condicion2) {\n  // Bloque de c\xf3digo que se ejecuta si la condici\xf3n 2 se cumple\n} else {\n  // Bloque de c\xf3digo que se ejecuta si ninguna de las condiciones se cumple\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir un mensaje en la consola si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es mayor a 5, otro mensaje si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es menor o igual a 5, y otro mensaje si la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," es menor o igual a 0:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let numero = 0;\n\nif (numero > 5) {\n  console.log("El n\xfamero es mayor a 5");\n} else if (numero <= 5) {\n  console.log("El n\xfamero es menor o igual a 5");\n} else {\n  console.log("El n\xfamero es menor o igual a 0");\n}\n\n// El n\xfamero es menor o igual a 5\n')),(0,r.kt)("h3",{id:"switch"},"switch"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," nos permite ejecutar un bloque de c\xf3digo dependiendo del valor de una variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"switch (variable) {\n  case valor1:\n    // Bloque de c\xf3digo que se ejecuta si la variable es igual a valor1\n    break;\n  case valor2:\n    // Bloque de c\xf3digo que se ejecuta si la variable es igual a valor2\n    break;\n  ... // Puede haber m\xe1s casos\n  default:\n    // Bloque de c\xf3digo que se ejecuta si la variable no es igual a ninguno de los valores\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir un mensaje en la consola dependiendo del valor de la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let numero = 3;\n\nswitch (numero) {\n  case 1:\n    console.log("El n\xfamero es 1");\n    break;\n  case 2:\n    console.log("El n\xfamero es 2");\n    break;\n  case 3:\n    console.log("El n\xfamero es 3");\n    break;\n  default:\n    console.log("El n\xfamero no es 1, 2 o 3");\n}\n\n// El n\xfamero es 3\n')),(0,r.kt)("h2",{id:"bucles"},"Bucles"),(0,r.kt)("h3",{id:"while"},"while"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," nos permite ejecutar un bloque de c\xf3digo mientras una condici\xf3n se cumpla."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"while (condicion) {\n  // Bloque de c\xf3digo que se ejecuta mientras la condici\xf3n se cumpla\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir los n\xfameros del 1 al 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let numero = 1;\n\nwhile (numero <= 5) {\n  console.log(numero);\n  numero++;\n}\n\n// 1\n// 2\n// 3\n// 4\n// 5\n")),(0,r.kt)("p",null,"En este ejemplo, la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," empieza en 1, y se va incrementando en 1 en cada iteraci\xf3n del bucle, hasta que la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," sea mayor a 5."),(0,r.kt)("h3",{id:"dowhile"},"do...while"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"do...while")," nos permite ejecutar un bloque de c\xf3digo al menos una vez, y luego repetir el bloque de c\xf3digo mientras una condici\xf3n se cumpla."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"do {\n  // Bloque de c\xf3digo que se ejecuta al menos una vez\n} while (condicion);\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir los n\xfameros del 1 al 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let numero = 1;\n\ndo {\n  console.log(numero);\n  numero++;\n} while (numero <= 5);\n\n// 1\n// 2\n// 3\n// 4\n// 5\n")),(0,r.kt)("p",null,"En este ejemplo, la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," empieza en 1, y se va incrementando en 1 en cada iteraci\xf3n del bucle, hasta que la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," sea mayor a 5."),(0,r.kt)("p",null,"Si modificamos la condici\xf3n a 'numero < 2', el bloque de c\xf3digo se ejecutar\xe1 al menos una vez, y luego se repetir\xe1 mientras la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," sea menor a 2."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let numero = 1;\n\ndo {\n  console.log(numero);\n  numero++;\n} while (numero < 2);\n\n// 1\n")),(0,r.kt)("p",null,"En este ejemplo, la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," empieza en 1, y se va incrementando en 1 en cada iteraci\xf3n del bucle, hasta que la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," sea mayor a 2. Pero a pesar de que la condici\xf3n no se cumple, el bloque de c\xf3digo se ejecutar\xe1 al menos una vez."),(0,r.kt)("h3",{id:"for"},"for"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," nos permite ejecutar un bloque de c\xf3digo un n\xfamero determinado de veces."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"for (inicializacion; condicion; incremento) {\n  // Bloque de c\xf3digo que se ejecuta un n\xfamero determinado de veces\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir los n\xfameros del 1 al 5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"for (let numero = 1; numero <= 5; numero++) {\n  console.log(numero);\n}\n\n// 1\n// 2\n// 3\n// 4\n// 5\n")),(0,r.kt)("p",null,"En este ejemplo, la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," empieza en 1, y se va incrementando en 1 en cada iteraci\xf3n del bucle, hasta que la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"numero")," sea mayor a 5."),(0,r.kt)("admonition",{title:"Ojo",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"En la inicializaci\xf3n, la condici\xf3n y el incremento, podemos usar cualquier expresi\xf3n v\xe1lida de JavaScript."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'for (let numero = 1, name = "Juan"; numero <= 5 && name === "Juan"; numero += 2) {\n  console.log(numero);\n}\n\n// 1\n// 3\n// 5\n'))),(0,r.kt)("h3",{id:"forin"},"for...in"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"for...in")," nos permite iterar sobre las propiedades de un objeto."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"for (propiedad in objeto) {\n  // Bloque de c\xf3digo que se ejecuta un n\xfamero determinado de veces\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir los nombres de las propiedades del objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"persona"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const persona = {\n  nombre: "Juan",\n  apellido: "Perez",\n  edad: 30,\n};\n\nfor (const propiedad in persona) {\n  console.log(propiedad);\n}\n\n// nombre\n// apellido\n// edad\n\n// Podemos acceder al valor de la propiedad con la notaci\xf3n de corchetes\n\nfor (const propiedad in persona) {\n  console.log(`${propiedad}: ${persona[propiedad]}`);\n}\n\n// nombre: Juan\n// apellido: Perez\n// edad: 30\n')),(0,r.kt)("h3",{id:"forof"},"for...of"),(0,r.kt)("p",null,"La estructura ",(0,r.kt)("inlineCode",{parentName:"p"},"for...of")," nos permite iterar sobre los elementos de un objeto iterable (Array, String, y otros)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Sintaxis"',title:'"Sintaxis"'},"for (elemento of iterable) {\n  // Bloque de c\xf3digo que se ejecuta un n\xfamero determinado de veces\n}\n")),(0,r.kt)("p",null,"Por ejemplo, podemos imprimir los elementos del array ",(0,r.kt)("inlineCode",{parentName:"p"},"colores"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="for...of con Array"',title:'"for...of',con:!0,'Array"':!0},'const colores = ["rojo", "verde", "azul"];\n\nfor (const color of colores) {\n  console.log(color);\n}\n\n// rojo\n// verde\n// azul\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="for...of con String"',title:'"for...of',con:!0,'String"':!0},'const nombre = "Juan";\n\nfor (const letra of nombre) {\n  console.log(letra);\n}\n\n// J\n// u\n// a\n// n\n')))}d.isMDXComponent=!0}}]);