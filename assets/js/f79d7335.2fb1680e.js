"use strict";(self.webpackChunkaprendiendo_js=self.webpackChunkaprendiendo_js||[]).push([[6774],{3905:(e,r,a)=>{a.d(r,{Zo:()=>u,kt:()=>g});var n=a(7294);function i(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function t(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?t(Object(a),!0).forEach((function(r){i(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,i=function(e,r){if(null==e)return{};var a,n,i={},t=Object.keys(e);for(n=0;n<t.length;n++)a=t[n],r.indexOf(a)>=0||(i[a]=e[a]);return i}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)a=t[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var r=n.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},u=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var a=e.components,i=e.mdxType,t=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(a),m=i,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||t;return a?n.createElement(g,o(o({ref:r},u),{},{components:a})):n.createElement(g,o({ref:r},u))}));function g(e,r){var a=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var t=a.length,o=new Array(t);o[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<t;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},156:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const t={title:"Personalizando middlewares",slug:"/custom-middlewares",sidebar_position:3},o=void 0,l={unversionedId:"modulo06/custom-midd",id:"modulo06/custom-midd",title:"Personalizando middlewares",description:"En Express.js, un middleware es simplemente una funci\xf3n que tiene acceso al objeto request (req), al objeto response (res) y al siguiente middleware en la cadena (generalmente llamado next()). Los middlewares se utilizan para realizar tareas como la validaci\xf3n de datos, la autenticaci\xf3n de usuarios y el manejo de errores.",source:"@site/docs/modulo06/custom-midd.md",sourceDirName:"modulo06",slug:"/custom-middlewares",permalink:"/backend-nodejs-mongodb/custom-middlewares",draft:!1,editUrl:"https://github.com/ashel1806/backend-nodejs-mongodb/tree/main/docs/modulo06/custom-midd.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Personalizando middlewares",slug:"/custom-middlewares",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Middlewares internos",permalink:"/backend-nodejs-mongodb/built-in-middlewares"},next:{title:"Middlewares a nivel de aplicaci\xf3n",permalink:"/backend-nodejs-mongodb/app-level-middlewares"}},s={},d=[{value:"Ejemplos de middlewares personalizados",id:"ejemplos-de-middlewares-personalizados",level:2},{value:"Middleware de Autenticaci\xf3n",id:"middleware-de-autenticaci\xf3n",level:3},{value:"Middleware para validar datos",id:"middleware-para-validar-datos",level:3},{value:"Middleware para manejar errores",id:"middleware-para-manejar-errores",level:3}],u={toc:d},c="wrapper";function p(e){let{components:r,...a}=e;return(0,i.kt)(c,(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"En Express.js, un middleware es simplemente una funci\xf3n que tiene acceso al objeto ",(0,i.kt)("inlineCode",{parentName:"p"},"request (req)"),", al objeto ",(0,i.kt)("inlineCode",{parentName:"p"},"response (res)")," y al siguiente middleware en la cadena (generalmente llamado ",(0,i.kt)("inlineCode",{parentName:"p"},"next()"),"). Los middlewares se utilizan para realizar tareas como la validaci\xf3n de datos, la autenticaci\xf3n de usuarios y el manejo de errores."),(0,i.kt)("p",null,"Para crear un middleware personalizado en Express.js, solamente tenemos que definir una funci\xf3n que tome tres par\xe1metros: ",(0,i.kt)("inlineCode",{parentName:"p"},"req"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"next"),". La funci\xf3n puede realizar cualquier tarea necesaria y luego llamar a ",(0,i.kt)("inlineCode",{parentName:"p"},"next()")," para pasar la solicitud al siguiente middleware en la cadena. Por ejemplo, el siguiente middleware simple simplemente registra la URL solicitada:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function logger(req, res, next) {\n  console.log(`Solicitud recibida en ${req.url}`);\n  next();\n}\n")),(0,i.kt)("p",null,"Para utilizar este middleware en una aplicaci\xf3n de Express, simplemente usamos ",(0,i.kt)("inlineCode",{parentName:"p"},"app.use()")," y pasamos la funci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," como argumento. Algo as\xed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\n\nfunction logger(req, res, next) {\n  console.log(`Solicitud recibida en ${req.url}`);\n  next();\n}\n\napp.use(logger);\n\napp.get('/', (req, res) => {\n  res.send('\xa1Hola, mundo!');\n});\n\napp.listen(3000, () => {\n  console.log('Servidor iniciado en el puerto 3000');\n});\n")),(0,i.kt)("p",null,"En este ejemplo, el middleware ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," se registra utilizando ",(0,i.kt)("inlineCode",{parentName:"p"},"app.use()"),". Cuando se recibe una solicitud, el middleware ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," registra la URL solicitada y luego llama a ",(0,i.kt)("inlineCode",{parentName:"p"},"next()")," para pasar la solicitud al siguiente middleware en la cadena. En este caso, el siguiente middleware es la ruta ",(0,i.kt)("inlineCode",{parentName:"p"},"app.get('/', ...)"),", que env\xeda una respuesta de texto simple al cliente."),(0,i.kt)("h2",{id:"ejemplos-de-middlewares-personalizados"},"Ejemplos de middlewares personalizados"),(0,i.kt)("h3",{id:"middleware-de-autenticaci\xf3n"},"Middleware de Autenticaci\xf3n"),(0,i.kt)("p",null,"Un middleware de autenticaci\xf3n se utiliza para verificar que un usuario est\xe9 autorizado para acceder a una ruta espec\xedfica. Por ejemplo, el siguiente middleware de autenticaci\xf3n verifica si un usuario ha iniciado sesi\xf3n antes de permitir el acceso a una ruta protegida:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function requireLogin(req, res, next) {\n  if (req.session.user) {\n    next(); // El usuario ha iniciado sesi\xf3n, continuar\n  } else {\n    res.redirect('/login'); // El usuario no ha iniciado sesi\xf3n, redireccionar al inicio de sesi\xf3n\n  }\n}\n")),(0,i.kt)("h3",{id:"middleware-para-validar-datos"},"Middleware para validar datos"),(0,i.kt)("p",null,"Un middleware de validaci\xf3n de datos se utiliza para verificar que los datos enviados por un cliente sean v\xe1lidos antes de procesarlos. Por ejemplo, el siguiente middleware de validaci\xf3n de datos verifica si el campo de correo electr\xf3nico es v\xe1lido antes de permitir que un usuario se registre:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function validateEmail(req, res, next) {\n  // Recuperamos el email desde el cuerpo de la solicitud\n  const email = req.body.email;\n\n  // Expresi\xf3n regular para validar el correo electr\xf3nico\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  // Verificamos si el correo electr\xf3nico es v\xe1lido\n  if (email && emailRegex.test(email)) {\n    next(); // El correo electr\xf3nico es v\xe1lido, continuar\n  } else {\n    res.status(400).send('El correo electr\xf3nico no es v\xe1lido'); // El correo electr\xf3nico no es v\xe1lido, enviar un error 400 al cliente\n  }\n}\n")),(0,i.kt)("h3",{id:"middleware-para-manejar-errores"},"Middleware para manejar errores"),(0,i.kt)("p",null,"Se utiliza para manejar errores que pueden ocurrir durante el procesamiento de una solicitud. Por ejemplo, el siguiente middleware de manejo de errores maneja errores 404 y 500:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function errorHandler(err, req, res, next) {\n  if (err.status === 404) {\n    res.status(404).send('P\xe1gina no encontrada');\n  } else {\n    console.error(err.stack);\n    res.status(500).send('Ha ocurrido un error interno del servidor');\n  }\n}\n")),(0,i.kt)("p",null,"Para utilizar este middleware, simplemente lo registramos al final de la cadena de middlewares:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst app = express();\n\nfunction errorHandler(err, req, res, next) {\n  if (err.status === 404) {\n    res.status(404).send('P\xe1gina no encontrada');\n  } else {\n    console.error(err.stack);\n    res.status(500).send('Ha ocurrido un error interno del servidor');\n  }\n}\n\napp.get('/', (req, res) => {\n  throw new Error('Ha ocurrido un error durante el procesamiento de la solicitud');\n});\n\n// Registramos el middleware de manejo de errores al final de la cadena de middlewares\napp.use(errorHandler);\n\napp.listen(3000, () => {\n  console.log('Servidor iniciado en el puerto 3000');\n});\n")),(0,i.kt)("p",null,"Este middleware maneja cualquier error que ocurra durante el procesamiento de una solicitud. Si el error es un error 404, se env\xeda un error 404 al cliente. De lo contrario, se env\xeda un error 500 al cliente."),(0,i.kt)("p",null,"En este ejemplo, la ruta ",(0,i.kt)("inlineCode",{parentName:"p"},"app.get('/', ...)")," arroja un error intencionalmente. Cuando se produce un error, el middleware de manejo de errores registra el error y env\xeda una respuesta de error apropiada al cliente."))}p.isMDXComponent=!0}}]);